name: upload HTML documentation, PyPI distribution and Docker image
on: 
  push: 
    tags: '[0-9]+.[0-9]+.[0-9]+'
jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    env:
      OS: linux
      PYTHON: '3.6'
    steps:
    - name: checkout the repo 
      uses: actions/checkout@v2
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.6
    - name: set VERSION value
      run: |
        echo "VERSION=$(echo "${{ github.ref }}" | cut -d/ -f3)" >> $GITHUB_ENV
    - name: build a sdist
      run: |
        pip install -r requirements.dev
        pip install -r requirements.txt
        echo ${{ env.VERSION }} > VERSION
        python setup.py sdist
        python -m pytest --doctest-modules --cov=clams/ --cov-report=xml
    - name: build HTML documentation 
      run: |
        pip install -r requirements.dev
        python setup.py build_sphinx -a
        rm -rf docs
        mv documentation/_build/html docs
        echo 'sdk.clams.ai' > docs/CNAME
        touch docs/.nojekyll
    - name: configure clamsbot git user
      run: |
        git config --local user.email "admin@clams.ai"
        git config --local user.name "clams-bot"
    - name: commit the built documentation 
      run: |
        git add docs
        git add -u docs
        git commit -m 'adding HTML documentation for publication'
    - name: push the documentation commit
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GH_CLAMSBOT_TOKEN }}
        branch: master
    - name: upload to the official pypi
      run: |
        twine upload -u __token__ -p ${{ secrets.PYPITOKEN }} dist/clams-python-${{ env.VERSION }}.tar.gz 
    - name: upload to the brandeis pypi
      run: |
        twine upload --repository-url http://morbius.cs-i.brandeis.edu:8081/repository/pypi-develop/ -u clamsuploader -p ${{ secrets.CLAMSUPLOADERPASSWORD }} dist/clams-python-${{ env.VERSION }}.tar.gz
    - name: just in case, wait for a few secs for the pypi dist gets available
      uses: jakejarvis/wait-action@master
      with:
        time: '10s'
    - name: set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: set up docker buildx
      uses: docker/setup-buildx-action@v1
    - name: docker hub login
      uses: docker/login-action@v1
      with:
        username: clamsbot
        password: ${{ secrets.DOCKERHUB_CLAMSBOT_TOKEN }}

    - name: generate tags for the base docker image
      id: base_docker_tags
      uses: Surgo/docker-smart-tag-action@v1
      with:
        docker_image: clamsproject/clams-python
    - name: build docker image and push to the hub using the tags
      id: base_docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: docker
        file: ./docker/Dockerfile
        tags: ${{ steps.base_docker_tags.outputs.tag }}
        build-args: |
          clams_version=${{ env.VERSION }}

    - name: generate tags for the tf2 docker image
      id: tf2_docker_tags
      uses: Surgo/docker-smart-tag-action@v1
      with:
        docker_image: clamsproject/clams-python-tf2
    - name: build tf2-enabled docker image and push to the hub using the tags
      id: tf2_docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: docker
        file: ./docker/tf2.dockerfile
        tags: ${{ steps.tf2_docker_tags.outputs.tag }}
        build-args: |
          clams_version=${{ env.VERSION }}

    - name: generate tags for the torch docker image
      id: torch_docker_tags
      uses: Surgo/docker-smart-tag-action@v1
      with:
        docker_image: clamsproject/clams-python-torch
    - name: build torch-enabled docker image and push to the hub using the tags
      id: torch_docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: docker
        file: ./docker/torch.dockerfile
        tags: ${{ steps.torch_docker_tags.outputs.tag }}
        build-args: |
          clams_version=${{ env.VERSION }}

    - name: generate tags for the ffmpeg docker image
      id: ffmpeg_docker_tags
      uses: Surgo/docker-smart-tag-action@v1
      with:
        docker_image: clamsproject/clams-python-ffmpeg
    - name: build ffmpeg-enabled docker image and push to the hub using the tags
      id: ffmpeg_docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: docker
        file: ./docker/ffmpeg.dockerfile
        tags: ${{ steps.ffmpeg_docker_tags.outputs.tag }}
        build-args: |
          clams_version=${{ env.VERSION }}

    - name: generate tags for the ffmpeg-tf2 docker image
      id: ffmpeg_tf2_docker_tags
      uses: Surgo/docker-smart-tag-action@v1
      with:
        docker_image: clamsproject/clams-python-ffmpeg-tf2
    - name: build ffmpeg-tf2-enabled docker image and push to the hub using the tags
      id: ffmpeg_tf2_docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: docker
        file: ./docker/ffmpeg-tf2.dockerfile
        tags: ${{ steps.ffmpeg_tf2_docker_tags.outputs.tag }}
        build-args: |
          clams_version=${{ env.VERSION }}

    - name: generate tags for the ffmpeg-torch docker image
      id: ffmpeg_torch_docker_tags
      uses: Surgo/docker-smart-tag-action@v1
      with:
        docker_image: clamsproject/clams-python-ffmpeg-torch
    - name: build ffmpeg-torch-enabled docker image and push to the hub using the tags
      id: ffmpeg_torch_docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: docker
        file: ./docker/ffmpeg-torch.dockerfile
        tags: ${{ steps.ffmpeg_torch_docker_tags.outputs.tag }}
        build-args: |
          clams_version=${{ env.VERSION }}

    - name: generate tags for the opencv4 docker image
      id: opencv4_docker_tags
      uses: Surgo/docker-smart-tag-action@v1
      with:
        docker_image: clamsproject/clams-python-opencv4
    - name: build opencv4-enabled docker image and push to the hub using the tags
      id: opencv4_docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: docker
        file: ./docker/opencv4.dockerfile
        tags: ${{ steps.opencv4_docker_tags.outputs.tag }}
        build-args: |
          clams_version=${{ env.VERSION }}

    - name: generate tags for the opencv4-tf2 docker image
      id: opencv4_tf2_docker_tags
      uses: Surgo/docker-smart-tag-action@v1
      with:
        docker_image: clamsproject/clams-python-opencv4-tf2
    - name: build opencv4-tf2-enabled docker image and push to the hub using the tags
      id: opencv4_tf2_docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: docker
        file: ./docker/opencv4-tf2.dockerfile
        tags: ${{ steps.opencv4_tf2_docker_tags.outputs.tag }}
        build-args: |
          clams_version=${{ env.VERSION }}

    - name: generate tags for the opencv4-torch docker image
      id: opencv4_torch_docker_tags
      uses: Surgo/docker-smart-tag-action@v1
      with:
        docker_image: clamsproject/clams-python-opencv4-torch
    - name: build opencv4-torch-enabled docker image and push to the hub using the tags
      id: opencv4_torch_docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: docker
        file: ./docker/opencv4-torch.dockerfile
        tags: ${{ steps.opencv4_torch_docker_tags.outputs.tag }}
        build-args: |
          clams_version=${{ env.VERSION }}

