# This file is auto-generated. Do not edit manually.

name: "üì¶ Publish (base images)"

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      version:
        description: 'version to tag images'
        required: true

jobs:
  set-version:
    runs-on: ubuntu-latest
    name: "üè∑ Set version value"
    outputs:
      version: ${{ steps.output_version.outputs.version }}
    steps:
    - name: "üìå Set VERSION value from dispatch inputs"
      id: get_version_dispatch
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
    - name: "üìå Set VERSION value from pushed tag"
      id: get_version_tag
      if: ${{ github.event_name == 'push' }}
      run: echo "VERSION=$(echo "${{ github.ref }}" | cut -d/ -f3)" >> $GITHUB_ENV
    - name: "üè∑ Record VERSION for follow-up jobs"
      id: output_version
      run: |
        echo "version=${{ env.VERSION }}" >> $GITHUB_OUTPUT
  check-deployment:
    name: "‚úÖ PyPI deployment check"
    runs-on: ubuntu-latest
    needs: ['set-version']
    steps:
    - name: "‚è±Ô∏è Wait up to 20 minutes for the new clams-python is deployed on PyPI"
      uses: nev7n/wait_for_response@v1
      with:
        url: "https://pypi.org/project/clams-python/${{ needs.set-version.outputs.version }}/"
        responseCode: 200
        timeout: 1200000
        interval: 5000

  call-build-base:
    name: "ü§ô Call container workflow with the base"
    needs: ['set-version', 'check-deployment']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/Containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-ffmpeg:
    name: "ü§ô Call container workflow with `ffmpeg`"
    needs: ['set-version', 'call-build-base']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/ffmpeg.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-jdk8:
    name: "ü§ô Call container workflow with `jdk8`"
    needs: ['set-version', 'call-build-base']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/jdk8.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-tf2:
    name: "ü§ô Call container workflow with `tf2`"
    needs: ['set-version', 'call-build-base']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/tf2.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-torch2:
    name: "ü§ô Call container workflow with `torch2`"
    needs: ['set-version', 'call-build-base']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/torch2.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-ffmpeg-tf2:
    name: "ü§ô Call container workflow with `ffmpeg-tf2`"
    needs: ['set-version', 'call-build-ffmpeg']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/ffmpeg-tf2.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-ffmpeg-torch2:
    name: "ü§ô Call container workflow with `ffmpeg-torch2`"
    needs: ['set-version', 'call-build-ffmpeg']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/ffmpeg-torch2.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-opencv4:
    name: "ü§ô Call container workflow with `opencv4`"
    needs: ['set-version', 'call-build-ffmpeg']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/opencv4.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-opencv4-tf2:
    name: "ü§ô Call container workflow with `opencv4-tf2`"
    needs: ['set-version', 'call-build-opencv4']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/opencv4-tf2.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-opencv4-torch2:
    name: "ü§ô Call container workflow with `opencv4-torch2`"
    needs: ['set-version', 'call-build-opencv4']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/opencv4-torch2.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-tf2-hf:
    name: "ü§ô Call container workflow with `tf2-hf`"
    needs: ['set-version', 'call-build-tf2']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/tf2-hf.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-hf:
    name: "ü§ô Call container workflow with `hf`"
    needs: ['set-version', 'call-build-torch2']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/hf.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-ffmpeg-tf2-hf:
    name: "ü§ô Call container workflow with `ffmpeg-tf2-hf`"
    needs: ['set-version', 'call-build-ffmpeg-tf2']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/ffmpeg-tf2-hf.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-ffmpeg-hf:
    name: "ü§ô Call container workflow with `ffmpeg-hf`"
    needs: ['set-version', 'call-build-ffmpeg-torch2']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/ffmpeg-hf.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-opencv4-tf2-hf:
    name: "ü§ô Call container workflow with `opencv4-tf2-hf`"
    needs: ['set-version', 'call-build-opencv4-tf2']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/opencv4-tf2-hf.containerfile'
      version: ${{ needs.set-version.outputs.version }}

  call-build-opencv4-hf:
    name: "ü§ô Call container workflow with `opencv4-hf`"
    needs: ['set-version', 'call-build-opencv4-torch2']
    uses: ./.github/workflows/container.yml
    secrets: inherit
    with:
      buildfilename: './container/opencv4-hf.containerfile'
      version: ${{ needs.set-version.outputs.version }}
