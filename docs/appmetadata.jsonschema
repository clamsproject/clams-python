{
  "$comment": "clams-python SDK 1.3.3 was used to generate this schema",
  "$defs": {
    "Input": {
      "additionalProperties": false,
      "description": "Data model that describes input specification of a CLAMS app. \n\nCLAMS apps are expected to have at least one input type, and each type must\nbe defined by a ``@type`` URI string. If the type has specific properties and values required by the app, \nthey can be described in the (optional) ``properties`` field. Finally, a human-readable \nverbose description can be provided in the (optional) ``description`` field for users.\n\nDevelopers should take diligent care to include all input types and their properties in the app metadata. ",
      "properties": {
        "@type": {
          "description": "The type of the object. Must be a IRI string.",
          "format": "uri",
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A verbose, human-readable description of the type. This is intended to be used for documentation purpose for a particular use case of this annotation type and is not expected to be consumed by software. This description should work as a guideline for users to understand the output type, and also can be used as a expansion specification for the type definition beyond the base vocabulary."
        },
        "properties": {
          "type": "object",
          "additionalProperties": true,
          "default": {},
          "description": "(optional) Specification for type properties, if any. ``\"*\"`` indicates any value."
        },
        "required": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "(optional, True by default) Indicating whether this input type is mandatory or optional."
        }
      },
      "required": [
        "@type"
      ],
      "title": "CLAMS Input Specification",
      "type": "object"
    },
    "Output": {
      "additionalProperties": false,
      "description": "Data model that describes output specification of a CLAMS app. \n\nCLAMS apps are expected to have at least one output type, and each type must\nbe defined by a ``@type`` URI string. If the type has common properties and values generated by the app, \nthey can be described in the (optional) ``properties`` field. Finally, a human-readable \nverbose description can be provided in the (optional) ``description`` field for users.\n\nDevelopers should take diligent care to include all output types and their properties in the app metadata. To \nspecify the property values, developers can use an actual value (for full match) or ``'*'`` (for any value).",
      "properties": {
        "@type": {
          "description": "The type of the object. Must be a IRI string.",
          "format": "uri",
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A verbose, human-readable description of the type. This is intended to be used for documentation purpose for a particular use case of this annotation type and is not expected to be consumed by software. This description should work as a guideline for users to understand the output type, and also can be used as a expansion specification for the type definition beyond the base vocabulary."
        },
        "properties": {
          "type": "object",
          "additionalProperties": true,
          "default": {},
          "description": "(optional) Specification for type properties, if any. ``\"*\"`` indicates any value."
        }
      },
      "required": [
        "@type"
      ],
      "title": "CLAMS Output Specification",
      "type": "object"
    },
    "RuntimeParameter": {
      "additionalProperties": false,
      "description": "Defines a data model that describes a single runtime configuration of a CLAMS app. \nUsually, an app keeps a list of these configuration specifications in the ``parameters`` field. \nWhen initializing a RuntimeParameter object in python the value for the default field must be a string. \nFor example, if you want to set a default value for a boolean parameter, use any of ``'True'``, ``'true'``, ``'t'``,\nor their falsy counterpart, instead of ``True`` or ``False``",
      "properties": {
        "name": {
          "description": "A short name of the parameter (works as a key).",
          "type": "string"
        },
        "description": {
          "description": "A longer description of the parameter (what it does, how to use, etc.).",
          "type": "string"
        },
        "type": {
          "description": "Type of the parameter value the app expects. Must be one of ('integer', 'number', 'string', 'boolean', 'map'). When type is ``map``, ``multivalued=true`` is forced, and when ``boolean``, ``multivalued=false`` is forced. \n\nNotes for developers: \n\nWhen the type is ``map``, the parameter value (still a single string from the users' perspective) must be formatted as a ``KEY:VALUE`` pair, namely a colon-separated string. To pass multiple key-value pairs, users need to pass the parameter multiple times (remember ``type=map`` implies ``multivalued=true``) with pairs in the colon-separated format. \n\nAlso, the `VALUE` part of the user input is always expected and handled as a string. If a developers wants to do more text processing on the passed value to accept more complex data types or structures (e.g., map from a string to a list of strings), it is up to the developer. However, any additional form requirements should be precisely described in the ``description`` field for users. \n\nFinally, the same format is expected for the default value, if any. For example, if the default desired dictionary is ``{'key1': 'value1', 'key2': 'value2'}``, the default value (used when initializing a parameter) should be ``['key1:value1','key2:value2']``\n.",
          "enum": [
            "integer",
            "number",
            "string",
            "boolean",
            "map"
          ],
          "type": "string"
        },
        "choices": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "(optional) List of string values that can be accepted."
        },
        "default": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "(optional) Default value for the parameter.\n\nNotes for developers: \n\nSetting a default value makes a parameter `optional`. \n\nWhen ``multivalued=true``, the default value should be a list of values. \n\nWhen ``type=map``, the default value should be a list of colon-separated strings. \n\n"
        },
        "multivalued": {
          "description": "(optional, False by default) Set True if the parameter can have multiple values.\n\nNote that, for parameters that allow multiple values, the SDK will pass a singleton list to ``_annotate()`` even when one value is passed via HTTP.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "description",
        "type",
        "multivalued"
      ],
      "title": "CLAMS App Runtime Parameter",
      "type": "object"
    }
  },
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "additionalProperties": false,
  "description": "Data model that describes a CLAMS app. \n\nCan be initialized by simply passing all required key-value pairs. \n\nIf you have a pre-generated metadata as an external file, you can read in the file as a ``dict`` and use it as \nkeyword arguments for initialization. But be careful with keys of which values are automatically generated by the \nSDK. \n\n\nPlease refer to <:ref:`appmetadata`> for the metadata specification. ",
  "properties": {
    "name": {
      "description": "A short name of the app.",
      "type": "string"
    },
    "description": {
      "description": "A longer description of the app (what it does, how to use, etc.).",
      "type": "string"
    },
    "app_version": {
      "default": "",
      "description": "(AUTO-GENERATED, DO NOT SET MANUALLY)\n\nVersion of the app.\n\nWhen the metadata is generated using clams-python SDK, this field is automatically filled in",
      "type": "string"
    },
    "mmif_version": {
      "default": "",
      "description": "(AUTO-GENERATED, DO NOT SET MANUALLY)\n\nVersion of MMIF specification the app.\n\nWhen the metadata is generated using clams-python SDK, this field is automatically filled in.",
      "type": "string"
    },
    "analyzer_version": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "(optional) Version of an analyzer software, if the app is working as a wrapper for one. "
    },
    "app_license": {
      "description": "License information of the app.",
      "type": "string"
    },
    "analyzer_license": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "(optional) License information of an analyzer software, if the app works as a wrapper for one. "
    },
    "identifier": {
      "description": "(partly AUTO-GENERATED)\n\nIRI-formatted unique identifier for the app.\n\nIf the app is to be published to the CLAMS app-directory, the developer should give a single string value composed with valid URL characters (no ``/``, no whitespace),\n\nthen when the metadata is generated using clams-python SDK, the app-directory URL is prepended and ``app_version`` value will be appended automatically.\n\nFor example, ``example-app`` -> ``http://apps.clams.ai/example-app/1.0.0``\n\nOtherwise, only the ``app_version`` value is used as suffix, so use an IRI form, but leave the version number out.",
      "format": "uri",
      "minLength": 1,
      "type": "string"
    },
    "url": {
      "description": "A public repository where the app's source code (git-based) and/or documentation is available. ",
      "format": "uri",
      "minLength": 1,
      "type": "string"
    },
    "input": {
      "default": [],
      "description": "List of input types. Must have at least one element.\n\nThis list should iterate all input types in an exhaustive and meticulous manner, meaning it is recommended for developers to pay extra attention to ``input`` and ``output`` fields to include 1) all types are listed, 2) if types to have specific properties, include the properties.\n\nThis list should interpreted conjunctive (``AND``).\n\nHowever, a nested list in this list means ``oneOf`` disjunctive (``OR``) specification.\n\nFor example, ``input = [TypeA (req=True), [TypeB, TypeC]]`` means``TypeA`` is required and either ``TypeB`` or ``TypeC`` is additionally required.\n\nAll input elements in the nested list must not be ``required=False``, and only a single nesting level is allowed (e.g. ``input = [TypeA, [ [TypeB, TypeC], [TypeD, TypeE] ] ]`` is not allowed).",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/Input"
          },
          {
            "items": {
              "$ref": "#/$defs/Input"
            },
            "type": "array"
          }
        ]
      },
      "type": "array"
    },
    "output": {
      "default": [],
      "description": "List of output types. Must have at least one element.This list should iterate all output types in an exhaustive and meticulous manner, meaning it is recommended for developers to pay extra attention to ``input`` and ``output`` fields to include ",
      "items": {
        "$ref": "#/$defs/Output"
      },
      "type": "array"
    },
    "parameters": {
      "default": [],
      "description": "List of runtime parameters. Can be empty.",
      "items": {
        "$ref": "#/$defs/RuntimeParameter"
      },
      "type": "array"
    },
    "dependencies": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "(optional) List of software dependencies of the app. \n\nThis list is completely optional, as in most cases such dependencies are specified in a separate file in the codebase of the app (for example, ``requirements.txt`` file for a Python app, or ``pom.xml`` file for a maven-based Java app).\n\nList items must be strings, not any kind of structured data. Thus, it is recommended to include a package name and its version in the string value at the minimum (e.g., ``clams-python==1.2.3``)."
    },
    "more": {
      "anyOf": [
        {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "(optional) A string-to-string map that can be used to store any additional metadata of the app."
    }
  },
  "required": [
    "name",
    "description",
    "app_license",
    "identifier",
    "url"
  ],
  "title": "CLAMS AppMetadata",
  "type": "object"
}
